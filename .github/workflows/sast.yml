name: SonarQube SAST Workflow with TestContainers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write
      security-events: write 
      actions: write
      id-token: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'
          cache: gradle

      - name: Make Gradle Wrapper Executable
        run: chmod +x Demo/gradlew
        
      - name: Start SonarQube Container
        run: |
          docker run -d --name sonarqube -p 9000:9000 sonarqube:lts
          echo "Waiting for SonarQube to start..."
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9000/api/system/status)" != "200" ]]; do sleep 5; done' || false
          echo "SonarQube is ready"

      - name: Change Default SonarQube Password
        run: |
          # Wait for SonarQube to be fully up
          sleep 30
          curl -X POST -u admin:admin "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=admin123"

      - name: Check Source Files
        run: |
          echo "Checking source files..."
          find Demo/src -name "*.java" || true
          echo "Checking compiled classes..."
          find Demo/build/classes -name "*.class" || true

      - name: Build and Test
        run: |
          cd Demo && ./gradlew clean build test --info

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd Demo && ./gradlew sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin123 \
            -Dsonar.verbose=true \
            -Dsonar.sarif.enabled=true \
            -Dsonar.sarif.reportPaths=build/reports/sonar-report.sarif \
            -Dsonar.projectKey=testcontainer-project \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.java.test.binaries=build/classes/java/test \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.java.libraries=build/libs/*.jar \
            -Dsonar.sourceEncoding=UTF-8 \
            --info

      - name: Debug SARIF File Path
        run: |
          echo "Checking for SARIF file..."
          ls -R Demo/build/reports/ || true
          echo "Current working directory:"
          pwd
          
      - name: Generate Placeholder SARIF if Missing
        run: |
          if [ ! -f "Demo/build/reports/sonar-report.sarif" ]; then
            mkdir -p Demo/build/reports/
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": []
            }' > Demo/build/reports/sonar-report.sarif
            echo "Generated placeholder SARIF file"
          fi

      - name: Upload SARIF File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: Demo/build/reports/sonar-report.sarif
          retention-days: 30

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: Demo/build/reports/tests/
          retention-days: 7

      - name: Publish SARIF Report to GitHub Packages
        run: |
          echo "Publishing SARIF Report to GitHub Packages"
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          mkdir -p sarif-reports
          cp Demo/build/reports/sonar-report.sarif ./sarif-reports/
          ls -alh ./sarif-reports
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="ghcr.io/${REPO_OWNER}/${REPO_NAME}-dependency-check-report:latest"
          docker build -t $IMAGE_TAG --build-arg SARIF_REPORT=./sarif-reports/sonar-report.sarif .
          docker push $IMAGE_TAG
