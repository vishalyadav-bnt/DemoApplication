name: SonarQube SAST Workflow with TestContainers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write
      security-events: write 
      actions: read
      id-token: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'
          cache: gradle

      - name: Make Gradle Wrapper Executable
        run: chmod +x Demo/gradlew

      - name: Start SonarQube Container
        run: |
          docker run -d --name sonarqube -p 9000:9000 sonarqube:latest
          echo "Waiting for SonarQube to start..."
          timeout 900 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9000/api/system/status)" != "200" ]]; do sleep 5; done' || false
          docker logs sonarqube
          echo "SonarQube is ready"

      - name: Generate SonarQube Token
        run: |
          TOKEN=$(curl -u admin:admin -X POST "http://localhost:9000/api/users/generate_token?name=github_action" | jq -r .token)
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$TOKEN"
          echo "Tokens :  $TOKEN "

      - name: Build and Test
        run: |
          cd Demo && ./gradlew clean build test --info

      - name: Check or Create sonar-reports Directory
        run: |
          mkdir -p sonar-reports    

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        run: |
          cd Demo && ./gradlew sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.projectKey=demo-project \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.report.export.path=sonar-reports/sonar-report.json \
            -Dsonar.analysis.mode=publish \
            --info

      - name: Check if SonarQube Report Exists
        run: |
          if [ ! -f sonar-reports/sonar-report.json ]; then
            echo "SonarQube report not found!"
            exit 1
          else
            echo "SonarQube report found!"
          fi

      - name: Create sonar-reports Directory if it Doesn't Exist
        run: |
          mkdir -p sonar-reports
          
      - name: Convert SonarQube JSON Report to SARIF
        run: |
          if [ ! -f sonar-reports/sonar-report.json ]; then
            echo "SonarQube report not found at sonar-reports/sonar-report.json"
            exit 1
          fi

          jq -n \
            --arg version "2.1.0" \
            --arg title "SonarQube Analysis" \
            --argjson report "$(cat sonar-reports/sonar-report.json)" \
            '{
              "version": $version,
              "runs": [ {
                "tool": {
                  "driver": {
                    "name": $title,
                    "informationUri": "http://localhost:9000"
                  }
                },
                "results": $report.issues
              } ]
            }' > sonar-reports/sonar-report.sarif

      - name: Upload SARIF File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-sarif-report
          path: sonar-reports/sonar-report.sarif
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            Demo/build/libs/*.jar
            Demo/build/reports/
            Demo/build/test-results/
          retention-days: 30
          if-no-files-found: warn
