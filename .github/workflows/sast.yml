name: SonarQube SAST Workflow with TestContainers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write
      security-events: write 
      actions: write
      id-token: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'
          cache: gradle

      - name: Make Gradle Wrapper Executable
        run: chmod +x Demo/gradlew
        
      - name: Start SonarQube Container
        run: |
          docker run -d --name sonarqube -p 9000:9000 sonarqube:lts-developer
          echo "Waiting for SonarQube to start..."
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9000/api/system/status)" != "200" ]]; do sleep 5; done' || false
          echo "SonarQube is ready"

      - name: Change Default SonarQube Password
        run: |
          sleep 30
          curl -X POST -u admin:admin "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=admin123"

      - name: Build and Test
        run: |
          cd Demo && ./gradlew clean build test --info

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd Demo && ./gradlew sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin123 \
            -Dsonar.verbose=true \
            -Dsonar.projectKey=testcontainer-project \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.java.test.binaries=build/classes/java/test \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.java.libraries=build/libs/*.jar \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.working.directory=build/sonar \
            -Dsonar.scm.provider=git \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.report.export.path=sonar-report.json \
            --info

      - name: Wait for SonarQube Processing
        run: |
          cd Demo
          echo "Waiting for SonarQube to process results..."
          sleep 30

      - name: Generate SARIF from SonarQube Results
        run: |
          cd Demo
          # Get the analysis results from SonarQube API
          ANALYSIS_ID=$(curl -u admin:admin123 "http://localhost:9000/api/ce/activity?component=testcontainer-project" | jq -r '.tasks[0].id')
          
          # Wait for analysis to complete
          while [ "$(curl -u admin:admin123 "http://localhost:9000/api/ce/task?id=${ANALYSIS_ID}" | jq -r '.task.status')" == "IN_PROGRESS" ]; do
            sleep 5
          done
          
          # Get the issues
          ISSUES=$(curl -u admin:admin123 "http://localhost:9000/api/issues/search?componentKeys=testcontainer-project" | jq '.')
          
          # Create SARIF report
          cat > build/sonar/scanner-report/sonar-report.sarif << EOF
          {
            "\$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "SonarQube",
                    "organization": "Anthropic",
                    "semanticVersion": "1.0.0",
                    "rules": []
                  }
                },
                "results": $(echo "$ISSUES" | jq '[.issues[] | {
                  "ruleId": .rule,
                  "message": {
                    "text": .message
                  },
                  "locations": [{
                    "physicalLocation": {
                      "artifactLocation": {
                        "uri": .component
                      },
                      "region": {
                        "startLine": .line,
                        "startColumn": 1
                      }
                    }
                  }],
                  "level": (if .severity == "BLOCKER" or .severity == "CRITICAL" then "error"
                           elif .severity == "MAJOR" then "warning"
                           else "note" end)
                }]')
              }
            ]
          }
          EOF

      - name: Copy SARIF to artifact location
        run: |
          mkdir -p sonar-reports
          cp Demo/build/sonar/scanner-report/sonar-report.sarif sonar-reports/
          echo "Content of generated SARIF file:"
          cat sonar-reports/sonar-report.sarif

      - name: Upload SARIF File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: sonar-reports/sonar-report.sarif
          retention-days: 30