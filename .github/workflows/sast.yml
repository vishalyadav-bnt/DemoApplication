name: SonarQube SAST Workflow with TestContainers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (ensure the version matches your Spring Boot application)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Change to your project's Java version

      # Step 3: Set up Gradle cache to speed up builds
      - name: Set Up Gradle Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Run tests (this will include starting SonarQube with TestContainers)
      - name: Run Tests (Including SonarQube Container Setup)
        run: ./gradlew test

      # Step 5: Run SonarQube Analysis using the Gradle SonarQube plugin
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: http://localhost:9000  # Update with TestContainers URL
          SONAR_LOGIN: admin  # Default SonarQube login
          SONAR_PASSWORD: admin  # Default SonarQube password
        run: |
          ./gradlew sonarqube \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_LOGIN \
            -Dsonar.password=$SONAR_PASSWORD

      # Step 6: Upload SARIF Report to GitHub
      - name: Upload SARIF Report to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: build/sonar-report.sarif  # Adjust path if needed
