name: SonarQube SAST Workflow with TestContainers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write
      security-events: write 

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (ensure the version matches your Spring Boot application)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          java-package: jdk
          check-latest: false
          distribution: 'adopt' # or 'adoptopenjdk', 'zulu', etc.

      # Step 3: Set up Gradle cache to speed up builds
      - name: Set Up Gradle Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make Gradle Wrapper Executable
        run: chmod +x Demo/gradlew
        
      - name: Start SonarQube Container
        run: |
          docker run -d -p 9000:9000 sonarqube:lts
          for i in {1..30}; do
            if curl -s http://localhost:9000 | grep "SonarQube"; then
              echo "SonarQube is ready"
              break
            fi
            echo "Waiting for SonarQube..."
            sleep 5
          done

      # Step 4: Run tests (this will include starting SonarQube with TestContainers)
      - name: Run Tests (Including SonarQube Container Setup)
        run: cd Demo && ./gradlew test

      # Step 5: Run SonarQube Analysis using the Gradle SonarQube plugin
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: http://localhost:9000  
          SONAR_LOGIN: admin 
          SONAR_PASSWORD: admin 
        run: |
           cd Demo && ./gradlew sonar \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_LOGIN \
            -Dsonar.password=$SONAR_PASSWORD \
            -Dsonar.sarif.enabled=true \
            -Dsonar.sarif.reportPaths=build/reports/sonar-report.sarif \
            --info

      - name: Debug SARIF File Path
        run: |
          echo "Checking for SARIF file..."
          ls -R Demo/build/reports/ || true
          echo "Creating reports directory if it doesn't exist..."
          mkdir -p Demo/build/reports/
          echo "Current working directory:"
          pwd
        
      - name: Generate Placeholder SARIF if Missing
        run: |
          if [ ! -f "Demo/build/reports/sonar-report.sarif" ]; then
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": []
            }' > Demo/build/reports/sonar-report.sarif
            echo "Generated placeholder SARIF file"
          fi

      - name: Create GitHub Release with SARIF
        env:
          GH_TOKEN: ${{ github.token }}  # Using built-in token instead of GHCR_PATT
        run: |
          VERSION="v1.0.0-$(date +%Y%m%d-%H%M%S)"
          if [ -f "Demo/build/reports/sonar-report.sarif" ]; then
            gh release create $VERSION \
              --title "SonarQube SARIF Report $VERSION" \
              --notes "Generated SonarQube SARIF Report" \
              Demo/build/reports/sonar-report.sarif
          else
            echo "SARIF file not found, creating release without it"
            gh release create $VERSION \
              --title "SonarQube SARIF Report $VERSION" \
              --notes "No SARIF report generated"
          fi

      - name: Upload SARIF File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: Demo/build/reports/sonar-report.sarif
          retention-days: 30