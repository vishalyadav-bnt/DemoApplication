name: SonarQube SAST Workflow with TestContainers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write
      security-events: write 
      actions: write         # Required for workflow operations
      id-token: write       # Required for token authentication
      issues: write         # Required for creating issues
      pull-requests: write  

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (ensure the version matches your Spring Boot application)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          java-package: jdk
          check-latest: false
          distribution: 'adopt' # or 'adoptopenjdk', 'zulu', etc.

      # Step 3: Set up Gradle cache to speed up builds
      - name: Set Up Gradle Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make Gradle Wrapper Executable
        run: chmod +x Demo/gradlew
        
      - name: Start SonarQube Container
        run: |
          docker run -d -p 9000:9000 sonarqube:lts
          for i in {1..30}; do
            if curl -s http://localhost:9000 | grep "SonarQube"; then
              echo "SonarQube is ready"
              break
            fi
            echo "Waiting for SonarQube..."
            sleep 5
          done

      # # Step 4: Run tests (this will include starting SonarQube with TestContainers)
      # - name: Run Tests (Including SonarQube Container Setup)
      #   run: cd Demo && ./gradlew test

      - name: Build and Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd Demo
          # Clean and build first
          ./gradlew clean build --info
          
          # Wait for SonarQube to be fully ready
          sleep 30
          
          # Run SonarQube analysis with debug output
          ./gradlew sonar \
            --info \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            -Dsonar.sarif.enabled=true \
            -Dsonar.verbose=true

      # Debug step to check SARIF file
      - name: Debug SARIF File
        run: |
          echo "Checking SARIF file content:"
          if [ -f "Demo/build/reports/sonar-report.sarif" ]; then
            cat Demo/build/reports/sonar-report.sarif
            echo "SARIF file exists and content shown above"
          else
            echo "SARIF file not found"
            ls -la Demo/build/reports/
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-${{ github.run_number }}
          release_name: Release v1.0.0-${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload SARIF File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: Demo/build/reports/sonar-report.sarif
          retention-days: 30
