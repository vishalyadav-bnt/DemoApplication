name: SonarQube SAST Workflow with TestContainers
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write
 
jobs:
  sonarqube-scan:
    name: Run SonarQube Analysis with TestContainers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle
      - name: Make Gradle Wrapper Executable
        run: chmod +x Demo/gradlew
      - name: Start SonarQube Container
        run: |
          docker run -d --name sonarqube -p 9000:9000 sonarqube:latest
          echo "Waiting for SonarQube to start..."
          timeout 180 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9000/api/system/status)" != "200" ]]; do sleep 5; done' || false
          docker logs sonarqube
          echo "SonarQube is ready"

      # - name: Change Admin Password
      #   run: |
      #     curl -f -X POST -u admin:admin \
      #       "http://localhost:9000/api/users/change_password?login=admin&password=admin123&previousPassword=admin"

      - name: Create Project Key
        run: |
          curl -f -X POST -u admin:admin \
            "http://localhost:9000/api/projects/create?project=Demo&name=Demo"

      - name: Build and Test
        run: |
          cd Demo && ./gradlew clean build test --info  
      - name: Run Sonar Analysis with Gradle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd Demo && ./gradlew sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            -Dsonar.projectKey=Demo \
            -Dsonar.qualitygate.wait=true

      - name: Export SonarQube Issues
        run: |
          curl -f -u admin:admin \
            "http://localhost:9000/api/issues/search?componentKeys=Demo&resolved=false&ps=500" \
            -o sonar-issues.json
 
      - name: Convert SonarQube Issues to SARIF
        run: |
          python3 - << EOF
          import json
          import uuid
 
          def convert_to_sarif(input_file, output_file):
              with open(input_file, 'r') as f:
                  sonar_data = json.load(f)
 
              sarif_template = {
                  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "SonarQube",
                              "rules": [],
                              "version": "1.0.0"
                          }
                      },
                      "results": []
                  }]
              }
 
              # Collect unique rules and map issues
              rule_map = {}
              results = []
 
              for issue in sonar_data.get('issues', []):
                  # Create unique rule ID
                  rule_key = issue.get('rule', '')
                  if rule_key not in rule_map:
                      rule_map[rule_key] = {
                          "id": rule_key,
                          "shortDescription": {"text": issue.get('message', '')},
                          "fullDescription": {"text": issue.get('message', '')},
                          "defaultSeverity": issue.get('severity', 'info').lower()
                      }
 
                  # Create result entry
                  result = {
                      "ruleId": rule_key,
                      "message": {"text": issue.get('message', '')},
                      "locations": [{
                          "physicalLocation": {
                              "artifactLocation": {
                                  "uri": issue.get('component', '').replace('Demo:', '')
                              },
                              "region": {
                                  "startLine": issue.get('line', 1)
                              }
                          }
                      }],
                      "partialFingerprints": {
                          "primaryLocationLineHash": str(uuid.uuid5(uuid.NAMESPACE_DNS, str(issue)))
                      }
                  }
                  results.append(result)
 
              # Add rules to SARIF
              sarif_template['runs'][0]['tool']['driver']['rules'] = list(rule_map.values())
              sarif_template['runs'][0]['results'] = results
 
              with open(output_file, 'w') as f:
                  json.dump(sarif_template, f, indent=2)
 
          convert_to_sarif('sonar-issues.json', 'sonar-issues.sarif')
          EOF
 
      - name: Upload JSON Issues
        uses: actions/upload-artifact@v4
        with:
          name: sonar-issues-json
          path: sonar-issues.json
 
      - name: Upload SARIF Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-issues-sarif
          path: sonar-issues.sarif
 
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sonar-issues.sarif