plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.sonarqube" version "5.1.0.4882"     //'10.7.0.96327'
   
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    testImplementation 'org.testcontainers:testcontainers:1.20.2' 
   
}

tasks.named('test') {
	useJUnitPlatform()
}
sonarqube {
    properties {
        // Basic Properties for SonarQube project
        property "sonar.projectKey", "testcontainer-project"                // Unique project key in SonarQube
        property "sonar.projectName", "Demo Application"                   // Project name in SonarQube
        property "sonar.host.url", "http://localhost:9000"                 // URL of your SonarQube instance
        property "sonar.login", "admin"                                    // SonarQube login credentials (use secure tokens instead of 'admin' in production)
        property "sonar.password", "admin"                                 // SonarQube password (preferably use a token here)

        // Source code properties
        property "sonar.sources", "src/main/java"                          // Path to your source code
        property "sonar.java.source", "17"                                  // Java version used in the project
        property "sonar.java.binaries", "build/classes/java/main"          // Path to compiled classes
        property "sonar.java.libraries", files(configurations.runtimeClasspath).asPath

        // Test properties
        property "sonar.tests", "src/test/java"                            // Path to your test code
        property "sonar.junit.reportPaths", "build/test-results/test"      // Path to JUnit test results
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml" // Path to JaCoCo report for test coverage

        // SARIF properties (for security and analysis reporting)
        property "sonar.sarif.enabled", "true"                             // Enable SARIF format for SonarQube reports
        property "sonar.sarif.reportPaths", "build/reports/sonar-report.sarif" // Path to SARIF report file

        // Debug properties (helpful for verbose logging)
        property "sonar.verbose", "true"                                   // Enable verbose logging for detailed analysis
        property "sonar.log.level", "DEBUG"                                // Set log level for SonarQube (DEBUG for more detailed logs)
    }
}

// Ensure that the build task runs before the SonarQube analysis task
tasks.sonar.dependsOn tasks.build

// Create reports directory if it doesn't already exist
tasks.register('createReportsDir') {
    doLast {
        file("${buildDir}/reports").mkdirs()
    }
}

// Ensure that reports directory is created before running SonarQube analysis
tasks.sonar.dependsOn createReportsDir
